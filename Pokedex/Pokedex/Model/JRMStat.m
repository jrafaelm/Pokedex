//
//  JRMStat.m
//  Autogenerated by plank
//
//  DO NOT EDIT - EDITS WILL BE OVERWRITTEN
//  @generated
//

#import "JRMStat.h"

struct JRMStatDirtyProperties {
    unsigned int JRMStatDirtyPropertyBaseStat:1;
    unsigned int JRMStatDirtyPropertyEffort:1;
    unsigned int JRMStatDirtyPropertyStat:1;
};

@interface JRMStat ()
@property (nonatomic, assign, readwrite) struct JRMStatDirtyProperties statDirtyProperties;
@end

@interface JRMStatBuilder ()
@property (nonatomic, assign, readwrite) struct JRMStatDirtyProperties statDirtyProperties;
@end

@implementation JRMStat
+ (NSString *)className
{
    return @"JRMStat";
}
+ (NSString *)polymorphicTypeIdentifier
{
    return @"stat";
}
+ (instancetype)modelObjectWithDictionary:(NSDictionary *)dictionary
{
    return [[self alloc] initWithModelDictionary:dictionary];
}
- (instancetype)init
{
    return [self initWithModelDictionary:@{}];
}
- (instancetype)initWithModelDictionary:(NSDictionary *)modelDictionary
{
    NSParameterAssert(modelDictionary);
    if (!(self = [super init])) {
        return self;
    }
    [modelDictionary enumerateKeysAndObjectsUsingBlock:^(NSString *  _Nonnull key, id  _Nonnull obj, __unused BOOL * _Nonnull stop){
        if ([key isEqualToString:@"stat"]) {
            id value = valueOrNil(modelDictionary, @"stat");
            if (value != nil) {
                self->_stat = value;
            }
            self->_statDirtyProperties.JRMStatDirtyPropertyStat = 1;
        }
        if ([key isEqualToString:@"base_stat"]) {
            id value = valueOrNil(modelDictionary, @"base_stat");
            if (value != nil) {
                self->_baseStat = [value integerValue];
            }
            self->_statDirtyProperties.JRMStatDirtyPropertyBaseStat = 1;
        }
        if ([key isEqualToString:@"effort"]) {
            id value = valueOrNil(modelDictionary, @"effort");
            if (value != nil) {
                self->_effort = [value integerValue];
            }
            self->_statDirtyProperties.JRMStatDirtyPropertyEffort = 1;
        }
    }];
    if ([self class] == [JRMStat class]) {
        [[NSNotificationCenter defaultCenter] postNotificationName:kPlankDidInitializeNotification object:self userInfo:@{ kPlankInitTypeKey : @(PlankModelInitTypeDefault) }];
    }
    return self;
}
- (instancetype)initWithBuilder:(JRMStatBuilder *)builder
{
    NSParameterAssert(builder);
    return [self initWithBuilder:builder initType:PlankModelInitTypeDefault];
}
- (instancetype)initWithBuilder:(JRMStatBuilder *)builder initType:(PlankModelInitType)initType
{
    NSParameterAssert(builder);
    if (!(self = [super init])) {
        return self;
    }
    _stat = builder.stat;
    _baseStat = builder.baseStat;
    _effort = builder.effort;
    _statDirtyProperties = builder.statDirtyProperties;
    if ([self class] == [JRMStat class]) {
        [[NSNotificationCenter defaultCenter] postNotificationName:kPlankDidInitializeNotification object:self userInfo:@{ kPlankInitTypeKey : @(initType) }];
    }
    return self;
}
- (NSString *)debugDescription
{
    NSArray<NSString *> *parentDebugDescription = [[super debugDescription] componentsSeparatedByString:@"\n"];
    NSMutableArray *descriptionFields = [NSMutableArray arrayWithCapacity:3];
    [descriptionFields addObject:parentDebugDescription];
    struct JRMStatDirtyProperties props = _statDirtyProperties;
    if (props.JRMStatDirtyPropertyStat) {
        [descriptionFields addObject:[@"_stat = " stringByAppendingFormat:@"%@", _stat]];
    }
    if (props.JRMStatDirtyPropertyBaseStat) {
        [descriptionFields addObject:[@"_baseStat = " stringByAppendingFormat:@"%@", @(_baseStat)]];
    }
    if (props.JRMStatDirtyPropertyEffort) {
        [descriptionFields addObject:[@"_effort = " stringByAppendingFormat:@"%@", @(_effort)]];
    }
    return [NSString stringWithFormat:@"JRMStat = {\n%@\n}", debugDescriptionForFields(descriptionFields)];
}
- (instancetype)copyWithBlock:(PLANK_NOESCAPE void (^)(JRMStatBuilder *builder))block
{
    NSParameterAssert(block);
    JRMStatBuilder *builder = [[JRMStatBuilder alloc] initWithModel:self];
    block(builder);
    return [builder build];
}
- (BOOL)isEqual:(id)anObject
{
    if (self == anObject) {
        return YES;
    }
    if ([anObject isKindOfClass:[JRMStat class]] == NO) {
        return NO;
    }
    return [self isEqualToStat:anObject];
}
- (BOOL)isEqualToStat:(JRMStat *)anObject
{
    return (
        (anObject != nil) &&
        (self == anObject) &&
        (_effort == anObject.effort) &&
        (_baseStat == anObject.baseStat) &&
        (_stat == anObject.stat || [_stat isEqualToDictionary:anObject.stat])
    );
}
- (NSUInteger)hash
{
    NSUInteger subhashes[] = {
        17,
        [_stat hash],
        (NSUInteger)_baseStat,
        (NSUInteger)_effort
    };
    return PINIntegerArrayHash(subhashes, sizeof(subhashes) / sizeof(subhashes[0]));
}
- (instancetype)mergeWithModel:(JRMStat *)modelObject
{
    return [self mergeWithModel:modelObject initType:PlankModelInitTypeFromMerge];
}
- (instancetype)mergeWithModel:(JRMStat *)modelObject initType:(PlankModelInitType)initType
{
    NSParameterAssert(modelObject);
    JRMStatBuilder *builder = [[JRMStatBuilder alloc] initWithModel:self];
    [builder mergeWithModel:modelObject];
    return [[JRMStat alloc] initWithBuilder:builder initType:initType];
}
#pragma mark - NSCopying
- (id)copyWithZone:(NSZone *)zone
{
    return self;
}
#pragma mark - NSSecureCoding
+ (BOOL)supportsSecureCoding
{
    return YES;
}
- (instancetype)initWithCoder:(NSCoder *)aDecoder
{
    if (!(self = [super init])) {
        return self;
    }
    _stat = [aDecoder decodeObjectOfClass:[NSDictionary class] forKey:@"stat"];
    _baseStat = [aDecoder decodeIntegerForKey:@"base_stat"];
    _effort = [aDecoder decodeIntegerForKey:@"effort"];
    _statDirtyProperties.JRMStatDirtyPropertyStat = [aDecoder decodeIntForKey:@"stat_dirty_property"] & 0x1;
    _statDirtyProperties.JRMStatDirtyPropertyBaseStat = [aDecoder decodeIntForKey:@"base_stat_dirty_property"] & 0x1;
    _statDirtyProperties.JRMStatDirtyPropertyEffort = [aDecoder decodeIntForKey:@"effort_dirty_property"] & 0x1;
    if ([self class] == [JRMStat class]) {
        [[NSNotificationCenter defaultCenter] postNotificationName:kPlankDidInitializeNotification object:self userInfo:@{ kPlankInitTypeKey : @(PlankModelInitTypeDefault) }];
    }
    return self;
}
- (void)encodeWithCoder:(NSCoder *)aCoder
{
    [aCoder encodeObject:self.stat forKey:@"stat"];
    [aCoder encodeInteger:self.baseStat forKey:@"base_stat"];
    [aCoder encodeInteger:self.effort forKey:@"effort"];
    [aCoder encodeInt:_statDirtyProperties.JRMStatDirtyPropertyStat forKey:@"stat_dirty_property"];
    [aCoder encodeInt:_statDirtyProperties.JRMStatDirtyPropertyBaseStat forKey:@"base_stat_dirty_property"];
    [aCoder encodeInt:_statDirtyProperties.JRMStatDirtyPropertyEffort forKey:@"effort_dirty_property"];
}
@end

@implementation JRMStatBuilder
- (instancetype)initWithModel:(JRMStat *)modelObject
{
    NSParameterAssert(modelObject);
    if (!(self = [super init])) {
        return self;
    }
    struct JRMStatDirtyProperties statDirtyProperties = modelObject.statDirtyProperties;
    if (statDirtyProperties.JRMStatDirtyPropertyStat) {
        _stat = modelObject.stat;
    }
    if (statDirtyProperties.JRMStatDirtyPropertyBaseStat) {
        _baseStat = modelObject.baseStat;
    }
    if (statDirtyProperties.JRMStatDirtyPropertyEffort) {
        _effort = modelObject.effort;
    }
    _statDirtyProperties = statDirtyProperties;
    return self;
}
- (JRMStat *)build
{
    return [[JRMStat alloc] initWithBuilder:self];
}
- (void)mergeWithModel:(JRMStat *)modelObject
{
    NSParameterAssert(modelObject);
    JRMStatBuilder *builder = self;
    if (modelObject.statDirtyProperties.JRMStatDirtyPropertyStat) {
        builder.stat = modelObject.stat;
    }
    if (modelObject.statDirtyProperties.JRMStatDirtyPropertyBaseStat) {
        builder.baseStat = modelObject.baseStat;
    }
    if (modelObject.statDirtyProperties.JRMStatDirtyPropertyEffort) {
        builder.effort = modelObject.effort;
    }
}
- (void)setStat:(NSDictionary *)stat
{
    _stat = stat;
    _statDirtyProperties.JRMStatDirtyPropertyStat = 1;
}
- (void)setBaseStat:(NSInteger)baseStat
{
    _baseStat = baseStat;
    _statDirtyProperties.JRMStatDirtyPropertyBaseStat = 1;
}
- (void)setEffort:(NSInteger)effort
{
    _effort = effort;
    _statDirtyProperties.JRMStatDirtyPropertyEffort = 1;
}
@end
